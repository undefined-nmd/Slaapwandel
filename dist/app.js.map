{"version":3,"sources":["../src/app.js"],"names":["app","use","url","ngrok","connect","apiUrl","getUrl","api","getApi","data","get","JSON","parse","console","log","tunnels","public_url","req","res","next","json","msg","disable","set","path","join","__dirname","skip","bodyParser","urlencoded","extended","express","static","routes","err","Error","status","render","message"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA;;;;;AAKA,MAAMA,MAAM,wBAAZ;;AAEAA,IAAIC,GAAJ,CAAQ,qBAAR;;AAEA,CAAC,kBAAiB;AAChB,QAAMC,MAAM,MAAMC,gBAAMC,OAAN,CAAc,IAAd,CAAlB;AACA,QAAMC,SAASF,gBAAMG,MAAN,EAAf;AACA,QAAMC,MAAMJ,gBAAMK,MAAN,EAAZ;AACA,MAAIC,OAAO,MAAMF,IAAIG,GAAJ,CAAQ,aAAR,CAAjB;AACAD,SAAOE,KAAKC,KAAL,CAAWH,IAAX,CAAP;AACAI,UAAQC,GAAR,CAAY,WAAWL,KAAKM,OAAL,CAAa,CAAb,EAAgBC,UAAvC;AAGD,CATD;AAUAhB,IAAIU,GAAJ,CAAQ,QAAR,EAAkB,UAAUO,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAC1CD,MAAIE,IAAJ,CAAS,EAACC,KAAK,yCAAN,EAAT;AACD,CAFD;AAGArB,IAAIsB,OAAJ,CAAY,cAAZ;;AAEA;AACAtB,IAAIuB,GAAJ,CAAQ,OAAR,EAAiBC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAAjB;AACA1B,IAAIuB,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;;AAEAvB,IAAIC,GAAJ,CAAQ,sBAAO,KAAP,EAAc;AACpB0B,QAAM,MAAM3B,IAAIU,GAAJ,CAAQ,KAAR,MAAmB;AADX,CAAd,CAAR;AAGAV,IAAIC,GAAJ,CAAQ2B,qBAAWR,IAAX,EAAR;AACApB,IAAIC,GAAJ,CAAQ2B,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACA9B,IAAIC,GAAJ,CAAQ8B,kBAAQC,MAAR,CAAeR,eAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAf,CAAR;;AAEA;AACA1B,IAAIC,GAAJ,CAAQ,GAAR,EAAagC,gBAAb;AACAjC,IAAIC,GAAJ,CAAQ,SAAR,EAAmBgC,gBAAnB;AACAjC,IAAIC,GAAJ,CAAQ,cAAR,EAAwBgC,gBAAxB;;AAEA;AACAjC,IAAIC,GAAJ,CAAQ,CAACgB,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC1B,QAAMe,MAAM,IAAIC,KAAJ,CAAU,WAAV,CAAZ;AACAD,MAAIE,MAAJ,GAAa,GAAb;AACAjB,OAAKe,GAAL;AACD,CAJD;;AAMA;AACAlC,IAAIC,GAAJ,CAAQ,CAACiC,GAAD,EAAMjB,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,KAAyB;AAAE;AACjCD,MACGkB,MADH,CACUF,IAAIE,MAAJ,IAAc,GADxB,EAEGC,MAFH,CAEU,OAFV,EAEmB;AACfC,aAASJ,IAAII;AADE,GAFnB;AAKD,CAND;;AAQA;AACA;;;;;;;;;;kBAUetC,G","file":"app.js","sourcesContent":["import express from 'express';\nimport path from 'path';\nimport logger from 'morgan';\nimport bodyParser from 'body-parser';\nimport routes from './routes';\nimport ngrok from 'ngrok';\nimport cors from 'cors'\n\n// twilio details\n/*\nconst accountSid = 'ACfa4f00deb9e5b377b9fa34a7f22e79c5';\nconst authToken = 'c2cb348bacbbb0e0dda7326ded417364';\nconst client = require('twilio')(accountSid, authToken);\n*/\nconst app = express();\n\napp.use(cors());\n\n(async function() {\n  const url = await ngrok.connect(8080);\n  const apiUrl = ngrok.getUrl();\n  const api = ngrok.getApi();\n  let data = await api.get('api/tunnels');\n  data = JSON.parse(data);\n  console.log(\"saved \" + data.tunnels[0].public_url);\n\n\n})();\napp.get('/ngrok', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for a Single Route'})\n});\napp.disable('x-powered-by');\n\n// View engine setup\napp.set('views', path.join(__dirname, '../views'));\napp.set('view engine', 'pug');\n\napp.use(logger('dev', {\n  skip: () => app.get('env') === 'test'\n}));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(express.static(path.join(__dirname, '../public')));\n\n// Routes\napp.use('/', routes);\napp.use('/signup', routes);\napp.use('/walkthrough', routes);\n\n// Catch 404 and forward to error handler\napp.use((req, res, next) => {\n  const err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// Error handler\napp.use((err, req, res, next) => { // eslint-disable-line no-unused-vars\n  res\n    .status(err.status || 500)\n    .render('error', {\n      message: err.message\n    });\n});\n\n//function to send an sms to the parent when Anna hasn't woken up yet\n/*const sendSMS = () => {\n  client.messages\n  .create({\n     body: 'Anna is nog niet wakker geworden!',\n     from: '+32460207022',\n     to: '+32497313223'\n   })\n  .then(message => console.log(\"de message id is\" + message.sid));\n}*/\n\nexport default app;\n"]}